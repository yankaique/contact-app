generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// NextAuth.js
model User {
  id            String @id @default(cuid())
  name          String @db.VarChar(100)
  email         String @unique @db.VarChar(255)
  cellphone     String @db.VarChar(15)
  birthday      String
  cpf           String @unique @db.VarChar(14)
  password      String @db.VarChar(60)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  contacts      Contact[] @relation("UserContacts")
  links         ShareLink[] @relation("UserLinks")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String @unique
  userId       String
  expires      DateTime
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Contact {
  id           String @id @default(cuid())
  name         String @db.VarChar(100)
  cellphone    String @db.VarChar(60)
  cpf          String @unique @db.VarChar(14)
  uf           String @db.VarChar(2)
  city         String @db.VarChar(100)
  neighborhood String @db.VarChar(100)
  address      String @db.VarChar(200)
  zipcode      String @db.VarChar(60)
  number       String? @db.VarChar(10)
  complement   String? @db.VarChar(200)
  lat          String
  long      String
  user      User @relation("UserContacts", fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShareLink {
  id          String @id @default(cuid())
  hash        String @db.VarChar(6)
  expired     Boolean
  user        User @relation("UserLinks", fields: [userId], references: [id])
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}